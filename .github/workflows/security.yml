name: Security & Quality Checks

on:
  pull_request:
  push:
    branches: [ main ]
  schedule:
    # Run weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'

permissions:
  contents: read
  security-events: write

jobs:
  audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for outdated dependencies
        run: |
          npm outdated || true
          echo "Run 'npm outdated' locally to see details"

  secrets-scan:
    name: Scan for Secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for exposed secrets
        run: |
          echo "Checking for accidentally committed secrets..."
          
          # Check for common secret patterns
          if git grep -E "(SUPABASE_SERVICE_ROLE|service_role_key|SECRET_KEY|PRIVATE_KEY|API_SECRET)" -- ':(exclude).github/' ':(exclude)*.md' ':(exclude)*.example'; then
            echo "::error::Potential secrets found in codebase!"
            exit 1
          fi
          
          # Check .env files aren't committed (except .env.example)
          if git ls-files | grep -E '^\.env(\..+)?$' | grep -v '\.env\.example$'; then
            echo "::error::.env files should not be committed!"
            exit 1
          fi
          
          echo "No secrets detected âœ“"

  build-quality:
    name: Build Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Check bundle size
        run: |
          npm run build
          
          # Check if dist directory exists
          if [ ! -d "dist" ]; then
            echo "::error::Build did not produce dist directory"
            exit 1
          fi
          
          # Calculate and report bundle size
          BUNDLE_SIZE=$(du -sh dist | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          echo "## Build Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle size**: $BUNDLE_SIZE" >> $GITHUB_STEP_SUMMARY
          
          # Warn if bundle is too large (> 10MB)
          SIZE_BYTES=$(du -sb dist | cut -f1)
          if [ "$SIZE_BYTES" -gt 10485760 ]; then
            echo "::warning::Bundle size is large (>10MB). Consider code splitting."
          fi
        env:
          VITE_SANITY_PROJECT_ID: ${{ secrets.VITE_SANITY_PROJECT_ID || '' }}
          VITE_SANITY_DATASET: ${{ secrets.VITE_SANITY_DATASET || 'production' }}

      - name: Check for console logs in production
        run: |
          if grep -r "console\\.log" dist/ 2>/dev/null; then
            echo "::warning::console.log statements found in production build"
          fi
